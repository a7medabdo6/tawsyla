name: Build and Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}

      - name: Add droplet to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to DigitalOcean Droplet
        env:
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USERNAME: ${{ secrets.DROPLET_USERNAME }}
        run: |
          # Create deployment directory on droplet if it doesn't exist
          ssh $DROPLET_USERNAME@$DROPLET_HOST "mkdir -p /opt/tawsyla"
          
          # Copy files to droplet (excluding node_modules and other large files)
          rsync -avz --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude 'dist' \
            --exclude 'build' \
            --exclude '.next' \
            --exclude 'coverage' \
            ./ $DROPLET_USERNAME@$DROPLET_HOST:/opt/tawsyla/

      - name: Build and Start Docker Containers
        env:
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USERNAME: ${{ secrets.DROPLET_USERNAME }}
        run: |
          ssh $DROPLET_USERNAME@$DROPLET_HOST << 'EOF'
            cd /opt/tawsyla
            
            # Stop existing containers
            docker-compose down
            
            # Remove old images to save space (optional)
            docker image prune -af
            
            # Build new images
            docker-compose build --no-cache
            
            # Start containers
            docker-compose up -d
            
            # Show running containers
            docker-compose ps
          EOF

      - name: Health Check
        env:
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USERNAME: ${{ secrets.DROPLET_USERNAME }}
        run: |
          ssh $DROPLET_USERNAME@$DROPLET_HOST << 'EOF'
            # Wait for services to start
            sleep 10
            
            # Check if containers are running
            docker-compose ps
            
            # Check logs for any errors
            docker-compose logs --tail=50
          EOF
