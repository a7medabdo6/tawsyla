name: Build and Deploy to DigitalOcean

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.DROPLET_SSH_KEY }}

      - name: Add droplet to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DROPLET_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to DigitalOcean Droplet
        env:
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USERNAME: ${{ secrets.DROPLET_USERNAME }}
        run: |
          # Create deployment directory on droplet if it doesn't exist
          ssh $DROPLET_USERNAME@$DROPLET_HOST "mkdir -p /opt/tawsyla"
          
          # Copy files to droplet (excluding node_modules and other large files)
          rsync -avz --delete \
            --exclude 'node_modules' \
            --exclude '.git' \
            --exclude 'dist' \
            --exclude 'build' \
            --exclude '.next' \
            --exclude 'coverage' \
            ./ $DROPLET_USERNAME@$DROPLET_HOST:/opt/tawsyla/

      - name: Build and Start Docker Containers
        env:
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USERNAME: ${{ secrets.DROPLET_USERNAME }}
        run: |
          ssh -T $DROPLET_USERNAME@$DROPLET_HOST bash << 'ENDSSH'
            set -e
            cd /opt/tawsyla
            
            echo "Stopping existing containers..."
            docker compose down || true
            
            echo "Removing old images..."
            docker image prune -af
            
            echo "Building new images..."
            docker compose build --no-cache
            
            echo "Starting containers..."
            docker compose up -d
            
            echo "Running containers:"
            docker compose ps
          ENDSSH

      - name: Health Check
        env:
          DROPLET_HOST: ${{ secrets.DROPLET_HOST }}
          DROPLET_USERNAME: ${{ secrets.DROPLET_USERNAME }}
        run: |
          ssh -T $DROPLET_USERNAME@$DROPLET_HOST bash << 'ENDSSH'
            echo "Waiting for services to start..."
            sleep 10
            
            echo "Checking container status:"
            docker compose ps
            
            echo "Recent logs:"
            docker compose logs --tail=50
          ENDSSH
